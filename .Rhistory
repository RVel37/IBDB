runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
getwd()
runApp()
conn <- db_utils$get_db_connection()
box::use(
dplyr[...],
app/logic/db_utils,
)
conn <- db_utils$get_db_connection()
deg_table <- paste0(study,"_","degs")
norm_table <- paste0(study, "_", tolower(norm))
study <- "GSE83687"
norm <- "CPM"
contrast <- "Crohn vs. Control"
conn <- db_utils$get_db_connection()
deg_table <- paste0(study,"_","degs")
norm_table <- paste0(study, "_", tolower(norm))
pair <- strsplit(contrast, " vs. ")[[1]]
plotted_genes <- tbl(conn, deg_table) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
mutate(gene _name = case_when(is.na(gene_name) ~ gene_id,TRUE ~ gene_name
plotted_genes <- tbl(conn, deg_table) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
mutate(gene _name = case_when(is.na(gene_name) ~ gene_id,TRUE ~ gene_name
left_join()
plotted_genes <- tbl(conn, deg_table) %>%
dplyr::left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
mutate(gene _name = case_when(is.na(gene_name) ~ gene_id,TRUE ~ gene_name
plotted_genes <- tbl(conn, deg_table) %>%
dplyr::left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
mutate(gene_name = case_when(is.na(gene_name) ~ gene_id,TRUE ~ gene_name
)) %>%
mutate(sigcond = case_when(
FDR > 0.05 ~ "n.s.",
abs(logFC) < 1 ~ "sig-only",
logFC > 1 ~ "Over-expressed",
logFC < -1 ~ "Under-expressed"
)) %>%
collect() %>%
filter(sigcond %in% c("Over-expressed", "Under-expressed")) %>%
arrange(logFC) %>%
View()
pair
plotted_genes <- tbl(conn, deg_table) %>%
filter(numerator == pair[1] & denominator == pair[2]) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
mutate(gene_name = case_when(is.na(gene_name) ~ gene_id,TRUE ~ gene_name
)) %>%
mutate(sigcond = case_when(
FDR > 0.05 ~ "n.s.",
abs(logFC) < 1 ~ "sig-only",
logFC > 1 ~ "Over-expressed",
logFC < -1 ~ "Under-expressed"
)) %>%
collect() %>%
filter(sigcond %in% c("Over-expressed", "Under-expressed")) %>%
arrange(logFC) %>%
plotted_genes <- tbl(conn, deg_table) %>%
filter(numerator == pair[1] & denominator == pair[2]) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
mutate(gene_name = case_when(is.na(gene_name) ~ gene_id,TRUE ~ gene_name
)) %>%
mutate(sigcond = case_when(
FDR > 0.05 ~ "n.s.",
abs(logFC) < 1 ~ "sig-only",
logFC > 1 ~ "Over-expressed",
logFC < -1 ~ "Under-expressed"
)) %>%
collect() %>%
filter(sigcond %in% c("Over-expressed", "Under-expressed")) %>%
arrange(logFC)
num <- pair[1]
dem <- pair[2]
plotted_genes <- tbl(conn, deg_table) %>%
filter(numerator == num & denominator == dem) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
mutate(gene_name = case_when(is.na(gene_name) ~ gene_id,TRUE ~ gene_name
)) %>%
mutate(sigcond = case_when(
FDR > 0.05 ~ "n.s.",
abs(logFC) < 1 ~ "sig-only",
logFC > 1 ~ "Over-expressed",
logFC < -1 ~ "Under-expressed"
)) %>%
collect() %>%
filter(sigcond %in% c("Over-expressed", "Under-expressed")) %>%
arrange(logFC)
View(plotted_genes)
plotted_genes <- tbl(conn, deg_table) %>%
filter(numerator == num & denominator == dem) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
mutate(gene_name = case_when(is.na(gene_name) ~ gene_id,TRUE ~ gene_name
)) %>%
mutate(sigcond = case_when(
FDR > 0.05 ~ "n.s.",
abs(logFC) < 1 ~ "sig-only",
logFC > 1 ~ "Over-expressed",
logFC < -1 ~ "Under-expressed"
)) %>%
collect() %>%
filter(sigcond %in% c("Over-expressed", "Under-expressed")) %>%
arrange(logFC)%>%
filter(row_number() > max(row_number()) - 10 | row_number() <= 10)
runApp()
values_table <- tbl(conn, norm_table) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
collect() %>%
pivot_longer(contains("SRR")) %>%
rename(sample_id = name) %>%
left_join(
tbl(conn, "metadata") %>% select(sample_id, condition) %>% collect(),
by = "sample_id"
) %>%
filter(gene_name %in% plotted_genes)
box::use(
dplyr[...], tidyr[...],
app/logic/db_utils,
)
values_table <- tbl(conn, norm_table) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
collect() %>%
pivot_longer(contains("SRR")) %>%
rename(sample_id = name) %>%
left_join(
tbl(conn, "metadata") %>% select(sample_id, condition) %>% collect(),
by = "sample_id"
) %>%
filter(gene_name %in% plotted_genes)
View(values_table)
plotted_genes <- tbl(conn, deg_table) %>%
filter(numerator == num & denominator == dem) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
mutate(gene_name = case_when(is.na(gene_name) ~ gene_id,TRUE ~ gene_name
)) %>%
mutate(sigcond = case_when(
FDR > 0.05 ~ "n.s.",
abs(logFC) < 1 ~ "sig-only",
logFC > 1 ~ "Over-expressed",
logFC < -1 ~ "Under-expressed"
)) %>%
collect() %>%
filter(sigcond %in% c("Over-expressed", "Under-expressed")) %>%
arrange(logFC)%>%
filter(row_number() > max(row_number()) - 10 | row_number() <= 10)%>%
pull(gene_name)
values_table <- tbl(conn, norm_table) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
collect() %>%
pivot_longer(contains("SRR")) %>%
rename(sample_id = name) %>%
left_join(
tbl(conn, "metadata") %>% select(sample_id, condition) %>% collect(),
by = "sample_id"
) %>%
filter(gene_name %in% plotted_genes)
View(values_table)
values_table <- tbl(conn, norm_table) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
collect() %>%
pivot_longer(contains("SRR")) %>%
rename(sample_id = name) %>%
left_join(
tbl(conn, "metadata") %>% select(sample_id, condition) %>% collect(),
by = "sample_id"
) %>%
filter(condition == pair[[1]] | condition == pair[[2]]) %>%
filter(gene_name %in% plotted_genes)
runApp()
runApp()
mat <- pivot_wider(
data = values_table,
id_cols = gene_name, names_from = sample_id, values_from = value
) %>%
column_to_rownames("gene_name") %>%
as.matrix()
mat <- pivot_wider(
data = values_table,
id_cols = gene_name, names_from = sample_id, values_from = value
) %>%
column_to_rownames("gene_name") %>%
as.matrix()
box::use(
dplyr[...], tidyr[...], tibble[...],
app/logic/db_utils,
)
mat <- pivot_wider(
data = values_table,
id_cols = gene_name, names_from = sample_id, values_from = value
) %>%
column_to_rownames("gene_name") %>%
as.matrix()
View(mat)
runApp()
runApp()
runApp()
runApp()
values_table %>%
filter(gene_name == "INSL5")
values_table %>%
filter(gene_name == "INSL5") %>%
view()
plotted_genes <- tbl(conn, deg_table) %>%
filter(numerator == num & denominator == dem) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
mutate(gene_name = case_when(is.na(gene_name) ~ gene_id,TRUE ~ gene_name
)) %>%
mutate(sigcond = case_when(
FDR > 0.05 ~ "n.s.",
abs(logFC) < 1 ~ "sig-only",
logFC > 1 ~ "Over-expressed",
logFC < -1 ~ "Under-expressed"
)) %>%
collect() %>%
filter(sigcond %in% c("Over-expressed", "Under-expressed")) %>%
arrange(logFC)%>%
filter(row_number() > max(row_number()) - 10 | row_number() <= 10)
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
mutate(gene_name = case_when(is.na(gene_name) ~ gene_id,TRUE ~ gene_name
)) %>%
mutate(sigcond = case_when(
FDR > 0.05 ~ "n.s.",
abs(logFC) < 1 ~ "sig-only",
logFC > 1 ~ "Over-expressed",
logFC < -1 ~ "Under-expressed"
)) %>%
collect()
plotted_genes <- tbl(conn, deg_table) %>%
filter(numerator == num & denominator == dem) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
mutate(gene_name = case_when(is.na(gene_name) ~ gene_id,TRUE ~ gene_name
)) %>%
mutate(sigcond = case_when(
FDR > 0.05 ~ "n.s.",
abs(logFC) < 1 ~ "sig-only",
logFC > 1 ~ "Over-expressed",
logFC < -1 ~ "Under-expressed"
)) %>%
collect()
plotted_genes <- tbl(conn, deg_table) %>%
filter(numerator == num & denominator == dem) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
mutate(gene_name = case_when(is.na(gene_name) ~ gene_id,TRUE ~ gene_name
)) %>%
mutate(sigcond = case_when(
FDR > 0.05 ~ "n.s.",
abs(logFC) < 1 ~ "sig-only",
logFC > 1 ~ "Over-expressed",
logFC < -1 ~ "Under-expressed"
)) %>%
collect() %>%
filter(sigcond %in% c("Over-expressed", "Under-expressed")) %>%
group_by(sigcond) %>%
slice_min(order_by = FDR, n = 12)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(BiocManager)
shiny::runApp()
renv::install("BiocManager")
renv::install("BH")
renv::install(c("BiocIO","DelayedArray","BiocIO","BiocParallel","GenomicAlignments"))
renv::install(c("GenomicFeatures","GenomicRanges","MatrixGenerics","Rhtslib"))
renv::install(c("GenomicRanges","MatrixGenerics","Rhtslib"))
renv::install(c("writeXLS","edgeR","enrichR","limma","locfit"))
renv::install(c("WriteXLS","edgeR","enrichR","limma","locfit"))
renv::snapshot()
values_table <- tbl(conn, norm_table)
shiny::runApp()
runApp()
runApp()
runApp()
# store permanently on disk
conn <- dbConnect(RSQLite::SQLite(), "appdata.sqlite")
# store permanently on disk
conn <- dbConnect(RSQLite::SQLite(), "appdata.sqlite")
# --- DATABASE CREATION --------------------------------------------------------
# Creates an empty sqlite database in your working directory if none exists
# Other it connects to an existing db if it exists
# `conn` is your connection to the db
conn <- DBI::dbConnect(RSQLite::SQLite(), "data.sqlite")
deg_table <- ("GSE112057_degs")
norm_table <- ("GSE112057_cpm")
contrast <- ("Crohn vs. Control")
pair <- strsplit(contrast, " vs. ")[[1]]
num <- pair[1]
dem <- pair[2]
plotted_genes <- tbl(conn, deg_table) %>%
filter(numerator == num & denominator == dem) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
mutate(gene_name = case_when(is.na(gene_name) ~ gene_id,TRUE ~ gene_name
)) %>%
mutate(sigcond = case_when(
FDR > 0.05 ~ "n.s.",
abs(logFC) < 1 ~ "sig-only",
logFC > 1 ~ "Over-expressed",
logFC < -1 ~ "Under-expressed"
)) %>%
filter(sigcond %in% c("Over-expressed", "Under-expressed")) %>%
group_by(sigcond) %>%
slice_min(order_by = FDR, n = 12) %>%
collect() %>%
pull (gene_name)
library("tidyverse")
num <- pair[1]
dem <- pair[2]
plotted_genes <- tbl(conn, deg_table) %>%
filter(numerator == num & denominator == dem) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
mutate(gene_name = case_when(is.na(gene_name) ~ gene_id,TRUE ~ gene_name
)) %>%
mutate(sigcond = case_when(
FDR > 0.05 ~ "n.s.",
abs(logFC) < 1 ~ "sig-only",
logFC > 1 ~ "Over-expressed",
logFC < -1 ~ "Under-expressed"
)) %>%
filter(sigcond %in% c("Over-expressed", "Under-expressed")) %>%
group_by(sigcond) %>%
slice_min(order_by = FDR, n = 12) %>%
collect() %>%
pull (gene_name)
values_table <- tbl(conn, norm_table) %>%
filter(condition == pair[[1]] | condition == pair[[2]]) %>%
filter(gene_name %in% plotted_genes)  %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
pivot_longer(contains("SRR")) %>%
rename(sample_id = name) %>%
collect() %>%
left_join(
tbl(conn, "metadata") %>% select(sample_id, condition) %>% collect(),
by = "sample_id"
) %>%
mat <- pivot_wider(
data = values_table,
id_cols = gene_name, names_from = sample_id, values_from = value
) %>%
column_to_rownames("gene_name") %>%
as.matrix()
values_table <- tbl(conn, norm_table) %>%
filter(condition == pair[[1]] | condition == pair[[2]]) %>%
filter(gene_name %in% plotted_genes)
values_table <- tbl(conn, norm_table)
norm_table
values_table <- tbl(conn, norm_table) %>% collect()
View(conn)
View(values_table)
View(values_table)
values_table <- tbl(conn, norm_table) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
pivot_longer(contains("SRR")) %>%
rename(sample_id = name) %>%
collect() %>%
left_join(
tbl(conn, "metadata") %>% select(sample_id, condition) %>% collect(),
by = "sample_id"
) %>%
filter(condition == pair[[1]] | condition == pair[[2]]) %>%
filter(gene_name %in% plotted_genes)
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
pivot_longer(contains("SRR")) %>%
rename(sample_id = name) %>%
collect()
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
pivot_longer(contains("SRR")) %>%
rename(sample_id = name) %>%
collect()
values_table <- tbl(conn, norm_table) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
pivot_longer(contains("SRR")) %>%
rename(sample_id = name) %>%
collect()
View(values_table)
values_table <- tbl(conn, "metadata") %>% select(sample_id, condition) %>%
filter(condition == pair[[1]] | condition == pair[[2]]) %>% collect
values_table <- tbl(conn, "metadata") %>%
select(sample_id, condition) %>% collect()
values_table <- tbl(conn, "metadata") %>%
select(sample_id, condition)
values_table$condition
values_table[["condition"]]
values_table <- tbl(conn, "metadata")
values_table <- tbl(conn, "metadata") %>%
select(sample_id, condition) %>% collect()
met <- tbl(conn, "metadata") %>%
select(sample_id, condition) %>% collect()
values_table <- tbl(conn, norm_table) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
pivot_longer(contains("SRR")) %>%
rename(sample_id = name) %>%
collect() %>%
left_join(
met,
by = "sample_id"
) %>%
filter(condition == pair[[1]] | condition == pair[[2]]) %>%
filter(gene_name %in% plotted_genes)
mat <- pivot_wider(
data = values_table,
id_cols = gene_name, names_from = sample_id, values_from = value
) %>%
column_to_rownames("gene_name") %>%
as.matrix()
View(mat)
runApp()
met <- tbl(conn, "metadata") %>%
select(sample_id, condition) %>% collect()
View(met)
met <- tbl(conn, "metadata") %>%
select(sample_id, condition) %>% collect()
filter(condition == pair[[1]] | condition == pair[[2]])
met <- tbl(conn, "metadata") %>%
select(sample_id, condition) %>% collect()
met <- tbl(conn, "metadata") %>%
select(sample_id, condition) %>% collect()
met <- tbl(conn, "metadata") %>%
select(sample_id, condition) %>% collect()
met <- tbl(conn, "metadata") %>%
select(sample_id, condition) %>% collect()
values_table <- tbl(conn, norm_table) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
pivot_longer(contains("SRR")) %>%
rename(sample_id = name) %>%
collect()
values_table <- tbl(conn, norm_table) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
pivot_longer(contains("SRR")) %>%
rename(sample_id = name) %>%
collect()
values_table <- tbl(conn, norm_table) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
filter(gene_name %in% plotted_genes) %>%
pivot_longer(contains("SRR")) %>%
rename(sample_id = name) %>%
collect() %>%
left_join(
tbl(conn, "metadata") %>% select(sample_id, condition) %>% collect(),
by = "sample_id"
) %>%
filter(condition == pair[[1]] | condition == pair[[2]])
runApp()
runApp()
runApp()
runApp()
runApp()
values_table <- tbl(conn, norm_table) %>%
filter(gene_name %in% plotted_genes) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
pivot_longer(contains("SRR")) %>%
rename(sample_id = name) %>%
collect() %>%
left_join(
tbl(conn, "metadata") %>% select(sample_id, condition) %>% collect(),
by = "sample_id"
) %>%
filter(condition == pair[[1]] | condition == pair[[2]])
values_table <- tbl(conn, norm_table) %>%
left_join(tbl(conn, "ens2sym"), by = "gene_id") %>%
filter(gene_name %in% plotted_genes) %>%
pivot_longer(contains("SRR")) %>%
rename(sample_id = name) %>%
collect() %>%
left_join(
tbl(conn, "metadata") %>% select(sample_id, condition) %>% collect(),
by = "sample_id"
) %>%
filter(condition == pair[[1]] | condition == pair[[2]])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# --- DATABASE CREATION --------------------------------------------------------
# Creates an empty sqlite database in your working directory if none exists
# Other it connects to an existing db if it exists
# `conn` is your connection to the db
conn <- DBI::dbConnect(RSQLite::SQLite(), "data.sqlite")
# --- DATABASE CREATION --------------------------------------------------------
# Creates an empty sqlite database in your working directory if none exists
# Other it connects to an existing db if it exists
# `conn` is your connection to the db
conn <- DBI::dbConnect(RSQLite::SQLite(), "data.sqlite")
# List out all the tables available in the db
DBI::dbListTables(conn)
# List the column names of a given table in the db
DBI::dbListFields(conn, "GSE123141_degs")
# Get a connection to a given table
tbl_conn <- dplyr::tbl(conn, "GSE123141_degs")
View(tbl_conn)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp('E:/CODING/R-WD1/IBDB2')
