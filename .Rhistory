str_starts(condition, denominator) ~ 2,
TRUE ~ 0
)) %>%
filter(group != 0)
groups <- factor(deg_meta$group)
design <- model.matrix(~0 + groups)
# DGE analysis
mat[, deg_meta$sample_id] %>%
DGEList(group = groups) %>%
calcNormFactors() %>%
estimateGLMCommonDisp(design) %>%
estimateGLMTrendedDisp(design) %>%
estimateGLMTagwiseDisp(design) %>%
glmFit(design) %>%
glmLRT(contrast = c(1, -1)) %>%
topTags(n="Inf") %>%
pluck("table") %>%
mutate(
numerator = numerator,
denominator = denominator
) %>%
rownames_to_column("gene_id") %>%
select(gene_id, numerator, denominator, logFC, FDR)
}) %>%
bind_rows() %>%
write_csv(deg_filename)
# Remove large unneeded R objects and free up some memory
rm(mat)
gc()
}
# filter for the sample IDs relevant to current study
for (study_id in unique_studies) {
exp_filename <- paste0(study_id, "_gene_exp.csv.gz")
deg_filename <- paste0(study_id, "_degs.csv.gz")
samples <- metadata %>%
filter(study_id == !!study_id) %>%
pull(sample_id)
mat <- lapply(samples, function(id) {
strand <- metadata %>%
filter(sample_id == id) %>%
pull(strandedness)
count_path <- file.path("raw_counts", paste0(id, "_ReadsPerGene.out.tab"))
read_tsv(count_path,
skip = 4,
col_names = c("gene_id", "unstranded", "reverse")
) %>%
select(gene_id, contains(!!strand)) %>%
rename(counts = contains(!!strand)) %>%
mutate(sample_id = id)
}) %>%
bind_rows() %>%
pivot_wider(names_from = sample_id, values_from = counts) %>%
column_to_rownames("gene_id") %>%
as.matrix()
cpms <- mat %>%
DGEList() %>%
calcNormFactors() %>%
cpm() %>%
mat_longify() %>%
rename(sample_id = name, cpm = value)
rpkms_mat <- rpkm(mat, gene_lengths[rownames(mat)])
rpkms <- rpkms_mat %>%
mat_longify() %>%
rename(sample_id = name, rpkm = value)
tpms <- rpkm_to_tpm(rpkms_mat) %>%
mat_longify() %>%
rename(sample_id = name, tpm = value)
cpms %>%
inner_join(rpkms, by = c("gene_id", "sample_id")) %>%
inner_join(tpms, by = c("gene_id", "sample_id")) %>%
write_csv(paste0(study_id, "_gene_exp.csv.gz"))
rm(cpms, rpkms, rpkms_mat, tpms)
gc()
# Get contrasts relevant to current study
study_contrasts <- all_contrasts %>%
filter(study_id == !!study_id)
# Get DEGs for each contrast and write to .csv.gz
apply(study_contrasts, 1, function(x) {
# Define current contrast
numerator <-  x[["numerator"]]
denominator <- x[["denominator"]]
# Get relevant samples according to current contrast
deg_meta <- metadata %>%
filter(study_id == !!study_id) %>%
mutate(group = case_when(
str_starts(condition, numerator) ~ 1,
str_starts(condition, denominator) ~ 2,
TRUE ~ 0
)) %>%
filter(group != 0)
groups <- factor(deg_meta$group)
design <- model.matrix(~0 + groups)
# DGE analysis
mat[, deg_meta$sample_id] %>%
DGEList(group = groups) %>%
calcNormFactors() %>%
estimateGLMCommonDisp(design) %>%
estimateGLMTrendedDisp(design) %>%
estimateGLMTagwiseDisp(design) %>%
glmFit(design) %>%
glmLRT(contrast = c(1, -1)) %>%
topTags(n="Inf") %>%
pluck("table") %>%
mutate(
numerator = numerator,
denominator = denominator
) %>%
rownames_to_column("gene_id") %>%
select(gene_id, numerator, denominator, logFC, FDR)
}) %>%
bind_rows() %>%
write_csv(deg_filename)
# Remove large unneeded R objects and free up some memory
rm(mat)
gc()
}
exists(preprocess/raw_counts)
exists(~/preprocess/raw_counts)
exists(~\preprocess\raw_counts)
file.exists(preprocess/raw_counts)
getwd()
file.exists(preprocess)
dir.exists(preprocess)
dir.exists(IBDB/preprocess)
dir.exists("IBDB/preprocess")
dir.exists("preprocess")
dir.exists("preprocess/raw_counts")
# filter for the sample IDs relevant to current study
for (study_id in unique_studies) {
exp_filename <- paste0(study_id, "_gene_exp.csv.gz")
deg_filename <- paste0(study_id, "_degs.csv.gz")
samples <- metadata %>%
filter(study_id == !!study_id) %>%
pull(sample_id)
mat <- lapply(samples, function(id) {
strand <- metadata %>%
filter(sample_id == id) %>%
pull(strandedness)
count_path <- file.path("preprocess/raw_counts", paste0(id, "_ReadsPerGene.out.tab"))
read_tsv(count_path,
skip = 4,
col_names = c("gene_id", "unstranded", "reverse")
) %>%
select(gene_id, contains(!!strand)) %>%
rename(counts = contains(!!strand)) %>%
mutate(sample_id = id)
}) %>%
bind_rows() %>%
pivot_wider(names_from = sample_id, values_from = counts) %>%
column_to_rownames("gene_id") %>%
as.matrix()
cpms <- mat %>%
DGEList() %>%
calcNormFactors() %>%
cpm() %>%
mat_longify() %>%
rename(sample_id = name, cpm = value)
rpkms_mat <- rpkm(mat, gene_lengths[rownames(mat)])
rpkms <- rpkms_mat %>%
mat_longify() %>%
rename(sample_id = name, rpkm = value)
tpms <- rpkm_to_tpm(rpkms_mat) %>%
mat_longify() %>%
rename(sample_id = name, tpm = value)
cpms %>%
inner_join(rpkms, by = c("gene_id", "sample_id")) %>%
inner_join(tpms, by = c("gene_id", "sample_id")) %>%
write_csv(paste0(study_id, "_gene_exp.csv.gz"))
rm(cpms, rpkms, rpkms_mat, tpms)
gc()
# Get contrasts relevant to current study
study_contrasts <- all_contrasts %>%
filter(study_id == !!study_id)
# Get DEGs for each contrast and write to .csv.gz
apply(study_contrasts, 1, function(x) {
# Define current contrast
numerator <-  x[["numerator"]]
denominator <- x[["denominator"]]
# Get relevant samples according to current contrast
deg_meta <- metadata %>%
filter(study_id == !!study_id) %>%
mutate(group = case_when(
str_starts(condition, numerator) ~ 1,
str_starts(condition, denominator) ~ 2,
TRUE ~ 0
)) %>%
filter(group != 0)
groups <- factor(deg_meta$group)
design <- model.matrix(~0 + groups)
# DGE analysis
mat[, deg_meta$sample_id] %>%
DGEList(group = groups) %>%
calcNormFactors() %>%
estimateGLMCommonDisp(design) %>%
estimateGLMTrendedDisp(design) %>%
estimateGLMTagwiseDisp(design) %>%
glmFit(design) %>%
glmLRT(contrast = c(1, -1)) %>%
topTags(n="Inf") %>%
pluck("table") %>%
mutate(
numerator = numerator,
denominator = denominator
) %>%
rownames_to_column("gene_id") %>%
select(gene_id, numerator, denominator, logFC, FDR)
}) %>%
bind_rows() %>%
write_csv(deg_filename)
# Remove large unneeded R objects and free up some memory
rm(mat)
gc()
}
View(mat)
gtf <- "preprocess/refs/Homo_sapiens.GRCh38.107.gtf"
# import data
metadata <- read.csv("preprocess/metadata/metadata.csv")
all_contrasts <- read.csv("preprocess/metadata/contrasts.csv")
gtf <- "preprocess/refs/Homo_sapiens.GRCh38.107.gtf"
# generate gene lengths
txdb <- GenomicFeatures::makeTxDbFromGFF(file = gtf)
gtf <- gzfile("preprocess/refs/Homo_sapiens.GRCh38.107.gtf.gz")
# generate gene lengths
txdb <- GenomicFeatures::makeTxDbFromGFF(file = gtf)
gtf <- "preprocess/refs/Homo_sapiens.GRCh38.107.gtf.gz"
# generate gene lengths
txdb <- GenomicFeatures::makeTxDbFromGFF(file = gtf)
gene_lengths <- GenomicFeatures::transcriptsBy(txdb, "gene") %>%
GenomicRanges::reduce() %>%
GenomicRanges::width() %>%
sum()
exp_outfile_suffix <- "_gene_exp.csv.gz"
deg_outfile_suffix <- "_degs.csv.gz"
# convert matrix into DF
mat_longify <- function(x) {
as.data.frame(x) %>%
rownames_to_column("gene_id") %>%
pivot_longer(cols = contains("SRR"))
}
rpkm_to_tpm <- function(x) {
rpkm.sum <- colSums(x)
return(t(t(x) / (1e-06 * rpkm.sum)))
}
unique_studies <- metadata %>%
distinct(study_id) %>%
pull()
# filter for the sample IDs relevant to current study
for (study_id in unique_studies) {
exp_filename <- paste0(study_id, "_gene_exp.csv.gz")
deg_filename <- paste0(study_id, "_degs.csv.gz")
samples <- metadata %>%
filter(study_id == !!study_id) %>%
pull(sample_id)
mat <- lapply(samples, function(id) {
strand <- metadata %>%
filter(sample_id == id) %>%
pull(strandedness)
count_path <- file.path("preprocess/raw_counts", paste0(id, "_ReadsPerGene.out.tab"))
read_tsv(count_path,
skip = 4,
col_names = c("gene_id", "unstranded", "reverse")
) %>%
select(gene_id, contains(!!strand)) %>%
rename(counts = contains(!!strand)) %>%
mutate(sample_id = id)
}) %>%
bind_rows() %>%
pivot_wider(names_from = sample_id, values_from = counts) %>%
column_to_rownames("gene_id") %>%
as.matrix()
cpms <- mat %>%
DGEList() %>%
calcNormFactors() %>%
cpm() %>%
mat_longify() %>%
rename(sample_id = name, cpm = value)
rpkms_mat <- rpkm(mat, gene_lengths[rownames(mat)])
rpkms <- rpkms_mat %>%
mat_longify() %>%
rename(sample_id = name, rpkm = value)
tpms <- rpkm_to_tpm(rpkms_mat) %>%
mat_longify() %>%
rename(sample_id = name, tpm = value)
cpms %>%
inner_join(rpkms, by = c("gene_id", "sample_id")) %>%
inner_join(tpms, by = c("gene_id", "sample_id")) %>%
write_csv(paste0(study_id, "_gene_exp.csv.gz"))
rm(cpms, rpkms, rpkms_mat, tpms)
gc()
# Get contrasts relevant to current study
study_contrasts <- all_contrasts %>%
filter(study_id == !!study_id)
# Get DEGs for each contrast and write to .csv.gz
apply(study_contrasts, 1, function(x) {
# Define current contrast
numerator <-  x[["numerator"]]
denominator <- x[["denominator"]]
# Get relevant samples according to current contrast
deg_meta <- metadata %>%
filter(study_id == !!study_id) %>%
mutate(group = case_when(
str_starts(condition, numerator) ~ 1,
str_starts(condition, denominator) ~ 2,
TRUE ~ 0
)) %>%
filter(group != 0)
groups <- factor(deg_meta$group)
design <- model.matrix(~0 + groups)
# DGE analysis
mat[, deg_meta$sample_id] %>%
DGEList(group = groups) %>%
calcNormFactors() %>%
estimateGLMCommonDisp(design) %>%
estimateGLMTrendedDisp(design) %>%
estimateGLMTagwiseDisp(design) %>%
glmFit(design) %>%
glmLRT(contrast = c(1, -1)) %>%
topTags(n="Inf") %>%
pluck("table") %>%
mutate(
numerator = numerator,
denominator = denominator
) %>%
rownames_to_column("gene_id") %>%
select(gene_id, numerator, denominator, logFC, FDR)
}) %>%
bind_rows() %>%
write_csv(deg_filename)
# Remove large unneeded R objects and free up some memory
rm(mat)
gc()
}
spec()
unique_studies <- metadata %>%
distinct(study_id) %>%
pull()
head(unique_studies)
# filter for the sample IDs relevant to current study
for (study_id in unique_studies) {
exp_filename <- paste0(study_id, "_gene_exp.csv.gz")
deg_filename <- paste0(study_id, "_degs.csv.gz")
samples <- metadata %>%
filter(study_id == !!study_id) %>%
pull(sample_id)
#build raw count matrix
mat <- lapply(samples, function(id) {
strand <- metadata %>%
filter(sample_id == id) %>%
pull(strandedness)
count_path <- file.path("preprocess/raw_counts", paste0(id, "_ReadsPerGene.out.tab"))
read_tsv(count_path,
col_names = c("gene_id", "unstranded", "reverse")
) %>%
select(gene_id, contains(!!strand)) %>%
rename(counts = contains(!!strand)) %>%
mutate(sample_id = id)
}) %>%
bind_rows() %>%
pivot_wider(names_from = sample_id, values_from = counts) %>%
column_to_rownames("gene_id") %>%
as.matrix()
cpms <- mat %>%
DGEList() %>%
calcNormFactors() %>%
cpm() %>%
mat_longify() %>%
rename(sample_id = name, cpm = value)
rpkms_mat <- rpkm(mat, gene_lengths[rownames(mat)])
rpkms <- rpkms_mat %>%
mat_longify() %>%
rename(sample_id = name, rpkm = value)
tpms <- rpkm_to_tpm(rpkms_mat) %>%
mat_longify() %>%
rename(sample_id = name, tpm = value)
cpms %>%
inner_join(rpkms, by = c("gene_id", "sample_id")) %>%
inner_join(tpms, by = c("gene_id", "sample_id")) %>%
write_csv(paste0(study_id, "_gene_exp.csv.gz"))
rm(cpms, rpkms, rpkms_mat, tpms)
gc()
# Get contrasts relevant to current study
study_contrasts <- all_contrasts %>%
filter(study_id == !!study_id)
# Get DEGs for each contrast and write to .csv.gz
apply(study_contrasts, 1, function(x) {
# Define current contrast
numerator <-  x[["numerator"]]
denominator <- x[["denominator"]]
# Get relevant samples according to current contrast
deg_meta <- metadata %>%
filter(study_id == !!study_id) %>%
mutate(group = case_when(
str_starts(condition, numerator) ~ 1,
str_starts(condition, denominator) ~ 2,
TRUE ~ 0
)) %>%
filter(group != 0)
groups <- factor(deg_meta$group)
design <- model.matrix(~0 + groups)
# DGE analysis
mat[, deg_meta$sample_id] %>%
DGEList(group = groups) %>%
calcNormFactors() %>%
estimateGLMCommonDisp(design) %>%
estimateGLMTrendedDisp(design) %>%
estimateGLMTagwiseDisp(design) %>%
glmFit(design) %>%
glmLRT(contrast = c(1, -1)) %>%
topTags(n="Inf") %>%
pluck("table") %>%
mutate(
numerator = numerator,
denominator = denominator
) %>%
rownames_to_column("gene_id") %>%
select(gene_id, numerator, denominator, logFC, FDR)
}) %>%
bind_rows() %>%
write_csv(deg_filename)
# Remove large unneeded R objects and free up some memory
rm(mat)
gc()
}
# filter for the sample IDs relevant to current study
for (study_id in unique_studies) {
exp_filename <- paste0(study_id, "_gene_exp.csv.gz")
deg_filename <- paste0(study_id, "_degs.csv.gz")
samples <- metadata %>%
filter(study_id == !!study_id) %>%
pull(sample_id)
#build raw count matrix
mat <- lapply(samples, function(id) {
strand <- metadata %>%
filter(sample_id == id) %>%
pull(strandedness)
count_path <- file.path("preprocess/raw_counts", paste0(id, "_ReadsPerGene.out.tab"))
read_tsv(count_path,
skip = 4,
col_names = c("gene_id", "unstranded", "reverse")
) %>%
select(gene_id, contains(!!strand)) %>%
rename(counts = contains(!!strand)) %>%
mutate(sample_id = id)
}) %>%
bind_rows() %>%
pivot_wider(names_from = sample_id, values_from = counts) %>%
column_to_rownames("gene_id") %>%
as.matrix()
cpms <- mat %>%
drop_na(mat) %>%
DGEList() %>%
calcNormFactors() %>%
cpm() %>%
mat_longify() %>%
rename(sample_id = name, cpm = value)
rpkms_mat <- rpkm(mat, gene_lengths[rownames(mat)])
rpkms <- rpkms_mat %>%
mat_longify() %>%
rename(sample_id = name, rpkm = value)
tpms <- rpkm_to_tpm(rpkms_mat) %>%
mat_longify() %>%
rename(sample_id = name, tpm = value)
cpms %>%
inner_join(rpkms, by = c("gene_id", "sample_id")) %>%
inner_join(tpms, by = c("gene_id", "sample_id")) %>%
write_csv(paste0(study_id, "_gene_exp.csv.gz"))
rm(cpms, rpkms, rpkms_mat, tpms)
gc()
# Get contrasts relevant to current study
study_contrasts <- all_contrasts %>%
filter(study_id == !!study_id)
# Get DEGs for each contrast and write to .csv.gz
apply(study_contrasts, 1, function(x) {
# Define current contrast
numerator <-  x[["numerator"]]
denominator <- x[["denominator"]]
# Get relevant samples according to current contrast
deg_meta <- metadata %>%
filter(study_id == !!study_id) %>%
mutate(group = case_when(
str_starts(condition, numerator) ~ 1,
str_starts(condition, denominator) ~ 2,
TRUE ~ 0
)) %>%
filter(group != 0)
groups <- factor(deg_meta$group)
design <- model.matrix(~0 + groups)
# DGE analysis
mat[, deg_meta$sample_id] %>%
DGEList(group = groups) %>%
calcNormFactors() %>%
estimateGLMCommonDisp(design) %>%
estimateGLMTrendedDisp(design) %>%
estimateGLMTagwiseDisp(design) %>%
glmFit(design) %>%
glmLRT(contrast = c(1, -1)) %>%
topTags(n="Inf") %>%
pluck("table") %>%
mutate(
numerator = numerator,
denominator = denominator
) %>%
rownames_to_column("gene_id") %>%
select(gene_id, numerator, denominator, logFC, FDR)
}) %>%
bind_rows() %>%
write_csv(deg_filename)
# Remove large unneeded R objects and free up some memory
rm(mat)
gc()
}
View(mat)
