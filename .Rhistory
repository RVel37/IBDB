txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
library(clusterProfiler)
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <- ChIPseeker::readPeakFile("ENCFF496UPU.bigBed")
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <- ChIPseeker::readPeakFile("ENCFF496UPU.bigBed")
NDC <- ChIPseeker::readPeakFile("ENCFF581WPG.bigBed")
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <- ChIPseeker::readPeakFile("ENCFF496UPU.bigBed",
as = "GRanges")
NDC <- ChIPseeker::readPeakFile("ENCFF581WPG.bigBed",
as = "GRanges")
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <- ChIPseeker::readPeakFile("ENCFF496UPU.Bed",
as = "GRanges")
source("https://bioconductor.org/biocLite.R")
library(rtracklayer)
BiocManager::install("rtracklayer")
library(rtracklayer)
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <- import("ENCFF496UPU.bigBed",format="bed")
NDC <- ChIPseeker::readPeakFile("ENCFF308JDD.bed.gz",
as = "GRanges")
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <-ChIPseeker::readPeakFile("ENCFF501VUI.bed.gz",as="GRanges")
NDC <-ChIPseeker::readPeakFile("ENCFF308JDD.bed.gz",as="GRanges")
View(NDC)
print(NPC)
files <- getSampleFiles("ENCFF501VUI.bed.gz","ENCFF308JDD.bed.gz")
files <- getSampleFiles()
print(files)
readPeakFile(files[[4]])
files <- list(NPC,DPC)
files <- list(NPC,NDC)
print(files)
covplot(NPC, weightCol="V5")
covplot(files,weightCol = "V1")
covplot(NPC,weightCol = "V1")
covplot(NPC,weightCol = "V1")
covplot(NPC, weightCol = "V5")
annotatePeak(NPC, tssRegion=c(-3000,3000),
TxDB=txdb, annoDB="org.Hs.eg.db")
?annotatePeak
annotatePeak(NPC, tssRegion=c(-3000,3000),
TxDB=txdb, annoDB="org.Hs.eg.db")
annotatePeak(NPC, tssRegion=c(-3000,3000)
,
TxDB=txdb, annoDB="org.Hs.eg.db")
annotatePeak(NPC, tssRegion=c(-3000,3000))
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
txdb <- "TxDb.Hsapiens.UCSC.hg19.knownGene"
annotatePeak(NPC, tssRegion=c(-3000,3000),TxDb=txdb)
annotatePeak(NPC, tssRegion=c(-3000,3000))
peakAnno <- annotatePeak(NPC, tssRegion=c(-3000,3000),
TxDb = "TxDb.Hsapiens.UCSC.hg19.knownGene")
peakAnno <- annotatePeak(NPC, tssRegion=c(-3000,3000),
TxDb =TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
peakAnno <- annotatePeak(NPC, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
vennpie(peakAnno)
upsetplot(peakAnno)
install.packages("UpSetR")
library(UpSetR)
upsetplot(peakAnno)
UpSetR::upsetplot(peakAnno)
??upsetplot
ChIPseeker::upsetplot(peakAnno)
ChIPseeker::upsetplot(peakAnno)
install.packages("ggupset")
library(ggupset)
ChIPseeker::upsetplot(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
inst
install.packages("ggimage")
library(ggimage)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
#annotatePeak uses hg19 by default
annotatePeak <- function(x){
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(x)
plotAnnoBar(x)
ChIPseeker::upsetplot(x, vennpie=T)
}
PeakAnno <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnno(NPC)
PeakAnno(NDC)
PeakAnno <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnno(NPC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnno(NPC)
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
PeakAnno(NPC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnnofun <- function(x){
print(x)
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnno(NPC)
PeakAnnofun <- function(x){
print(x)
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x)
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnno(NPC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnnofun(NPC)
PeakAnnofun(NDC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x)
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnnofun(NPC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x)
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnnofun(NPC)
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x)
PeakAnnofun(NPC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
x <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnnofun(NPC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
a <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnnofun(NPC)
View(annotatePeak)
#annotatePeak uses hg19 by default
paNPC <- annotatePeak(NPC, tssRegion=c(-3000,3000))
paNDC <- annotatePeak(NDC, tssregion=c(-3000,3000))
#annotatePeak uses hg19 by default
paNPC <- annotatePeak(NPC, tssRegion=c(-3000,3000))
#annotatePeak uses hg19 by default
paNPC <- annotatePeak(NPC, tssRegion=c(-3000,3000))
paNDC <- annotatePeak(NDC, tssRegion=c(-3000,3000))
#annotatePeak uses hg19 by default
paNPC <- annotatePeak(NPC, tssregion=c(-3000,3000))
paNDC <- annotatePeak(NDC, tssregion=c(-3000,3000))
?annotatePeak
#annotatePeak uses hg19 by default
paNPC <- annotatePeak(NPC, tssRegion = c(-3000,3000))
paNDC <- annotatePeak(NDC, tssRegion = c(-3000,3000))
BiocManager::install("ChIPseeker")
library(ChIPseeker)
library(clusterProfiler)
library(ggupset)
library(ggimage)
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <-ChIPseeker::readPeakFile("ENCFF501VUI.bed.gz",as="GRanges")
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <- ChIPseeker::readPeakFile("ENCFF501VUI.bed.gz",as="GRanges")
getwd()
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <-ChIPseeker::readPeakFile("ENCFF501VUI.bed.gz",as="GRanges")
NDC <-ChIPseeker::readPeakFile("ENCFF308JDD.bed.gz",as="GRanges")
files <- list(NPC,NDC)
#annotatePeak uses hg19 by default
paNPC <- annotatePeak(NPC, tssRegion = c(-3000,3000))
#annotatePeak uses hg19 by default
paNPC <- ChIPseeker::annotatePeak(NPC, tssRegion = c(-3000,3000))
paNDC <- ChIPseeker::annotatePeak(NDC, tssRegion = c(-3000,3000))
#annotatePeak uses hg19 by default
plotAnno <- function(x){
pa <- ChIPseeker::annotatePeak(NPC, tssRegion = c(-3000,3000))
plotAnnoPie(pa)
plotAnnoBar(pa)
ChIPseeker::upsetplot(pa, vennpie=T)
}
plotAnno(NPC)
plotAnno(NDC)
install.packages("ReactomePA")
BiocManager::install("ReactomePA")
library(ReactomePA)
pathway1 <- enrichPathway(as.data.frame(paNPC)$geneID)
pathway1 <- enrichPathway(as.data.frame(paNPC)$geneID)
paNPC <- ChIPseeker::annotatePeak(NPC, tssRegion = c(-3000,3000))
paNDC <- ChIPseeker::annotatePeak(NDC, tssRegion = c(-3000,3000))
pathway1 <- enrichPathway(as.data.frame(paNPC)$geneID)
head(pathway1)
head(pathway1,2)
pathway1 <- enrichPathway(as.data.frame(paNPC)$geneId)
head(pathway1,2)
gene <- seq2gene(NPC, tssRegion = c(-1000, 1000), flankDistance = 3000)
gene <- seq2gene(NPC, tssRegion = c(-1000, 1000), flankDistance = 3000,
TxDb=TxDb.Hsapiens.UCSC.hg19.knownGene)
gene <- ChIPseq::seq2gene(NPC, tssRegion = c(-1000, 1000), flankDistance = 3000,
TxDb=TxDb.Hsapiens.UCSC.hg19.knownGene)
gene <- ChIPseeker::seq2gene(NPC, tssRegion = c(-1000, 1000), flankDistance = 3000,
TxDb=TxDb.Hsapiens.UCSC.hg19.knownGene)
gene <- ChIPseeker::seq2gene(NPC, tssRegion = c(-1000, 1000), flankDistance = 3000,
TxDb=TxDb.Hsapiens.UCSC.hg19.knownGene)
TxDb.Hsapiens.UCSC.hg19.knownGene::TxDb.Hsapiens.UCSC.hg19.knownGene
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene::TxDb.Hsapiens.UCSC.hg19.knownGene
gene <- ChIPseeker::seq2gene(NPC, tssRegion = c(-1000, 1000), flankDistance = 3000,
TxDb=txdb)
pathway2 <- enrichPathway(gene)
head(pathway2, 2)
dotplot(pathway2)
data("tagMatrixList")
plotAvgProf(tagMatrixList,xlim = c(-3000,3000))
#ChIP peak dataset comparisons between NPC + NDC
promoter <- getPromoters(TxDb=txdb, upstream=3000, downstream=3000)
tagMatrixList <- lapply(files, getTagMatrix, windows=promoter)
data("tagMatrixList")
plotAvgProf(tagMatrixList,xlim = c(-3000,3000))
plotAvgProf(tagMatrixList, xlim=c(-3000, 3000), conf=0.95,resample=500, facet="row")
?getBioRegion
#ChIP peak dataset comparisons between NPC + NDC
bioregion <- ChIPseeker::getBioRegion(TxDb=txdb, upstream=3000, downstream=3000)
tagMatrixList <- lapply(files, getTagMatrix, windows=bioregion)
#ChIP peak dataset comparisons between NPC + NDC
bioregion <- ChIPseeker::getBioRegion(TxDb=txdb, by = "gene", type = "body")
#ChIP peak dataset comparisons between NPC + NDC
promoter <- getPromoters(TxDb=txdb, upstream=3000, downstream=3000)
tagMatrixList <- lapply(files, getTagMatrix, windows=promoter)
#set up connection to in-memory RSQLite database
conn <- dbConnect(RSQLite::SQLite(), "E:\CODING\R-WD1\IBD-Application\IBD-DB")
#set up connection to in-memory RSQLite database
conn <- dbConnect(RSQLite::SQLite(), "R-WD1\IBD-Application\IBD-DB")
#set up connection to in-memory RSQLite database
conn <- dbConnect(RSQLite::SQLite(), "IBD-Application\IBD-DB")
#set up connection to in-memory RSQLite database
conn <- dbConnect(RSQLite::SQLite(), "IBD-Application/IBD-DB")
#copy data into RSQLite databas
dbWriteTable(con, "App_data", app_data)
#set up connection to in-memory RSQLite database
conn <- dbConnect(RSQLite::SQLite(), "IBD-Application/IBD-DB")
library(RSQLite)
library(edgeR)
library(tidyverse)
library(DBI)
#set up connection to in-memory RSQLite database
conn <- dbConnect(RSQLite::SQLite(), "IBD-Application/IBD-DB")
#set up connection to in-memory RSQLite database
conn <- dbConnect(RSQLite::SQLite(), "IBDB.sqlite")
#store permanently on disk
conn <- dbConnect(RSQLite::SQLite(), "appdata.sqlite")
#write data to table
RSQLite::dbWriteTable(conn, "Appdata", appdata)
shiny::runApp('IBD-Application/IBD-DB')
runApp('IBD-Application/IBD-DB')
runApp('IBD-Application/IBD-DB')
getwd()
getwd()
# Run the app
shinyApp(ui, server)
library(shiny)
# Define UI
ui <- fluidPage(
# UI elements (e.g., inputs, outputs, layouts) go here
)
# Define server
server <- function(input, output) {
# Server logic (e.g., data processing, calculations, plotting) goes here
}
# Define server
server <- function(input, output) {
# Server logic (e.g., data processing, calculations, plotting) goes here
}
# Run the app
shinyApp(ui, server)
)
# Define UI
ui <- fluidPage(
# Define UI
ui <- fluidPage(
titlePanel(
H3(yo)
),
sidebarLayout(
p(heyy)
sidebarPanel(
# Define UI
ui <- fluidPage(
titlePanel(
H3(yo)
),
sidebarLayout(
sidebarPanel(
selectinput("dropdown1","Study",
choices = c("GSE112057","GSE123141","GSE83687")),
sidebarPanel(
selectinput("dropdown1","Study",
choices = c("GSE112057","GSE123141","GSE83687"))
))
)
)
# Define UI
ui <- fluidPage(
titlePanel(
h3(yo),
),
sidebarLayout(
sidebarPanel(
selectinput("dropdown1","Study",
choices = c("GSE112057","GSE123141","GSE83687")),
sidebarPanel(
selectinput("dropdown1","Study",
choices = c("GSE112057","GSE123141","GSE83687"))
))
)
)
# Define UI
ui <- fluidPage(
titlePanel(
h3("yo"),
),
sidebarLayout(
sidebarPanel(
selectinput("dropdown1","Study",
choices = c("GSE112057","GSE123141","GSE83687")),
sidebarPanel(
selectinput("dropdown1","Study",
choices = c("GSE112057","GSE123141","GSE83687"))
))
)
)
# Define UI
ui <- fluidPage(
titlePanel(
h3("yo"),
),
sidebarLayout(
sidebarPanel(
selectInput("dropdown1","Study",
choices = c("GSE112057","GSE123141","GSE83687")),
sidebarPanel(
selectInput("dropdown1","Study",
choices = c("GSE112057","GSE123141","GSE83687"))
))
)
)
# Define UI
ui <- fluidPage(
titlePanel(
h3("yo"),
),
sidebarLayout(
sidebarPanel(
selectInput("dropdown1","Study",
choices = c("GSE112057","GSE123141","GSE83687")),
mainPanel(
selectInput("dropdown1","Study",
choices = c("GSE112057","GSE123141","GSE83687"))
))
)
)
# Define UI
ui <- fluidPage(
titlePanel(
h3("yo"),
),
sidebarLayout(
sidebarPanel(
selectInput("dropdown1","Study",
choices = c("GSE112057","GSE123141","GSE83687"))),
mainPanel(
selectInput("dropdown1","Study",
choices = c("GSE112057","GSE123141","GSE83687"))
)
)
)
# Run the app
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
fluidRow(
column(4,
fluidRow(
column(2,
p("hey")),
column(2, p("hey again")),
)
)
)
)
# Run the app
shinyApp(ui, server)
# Define UI
ui <- fluidPage(
fluidRow(
column(4,
fluidRow(
column(6,
p("hey")),
column(6, p("hey again")),
)
)
)
)
# Run the app
shinyApp(ui, server)
# Run the app
shinyApp(ui, server)
shiny::runApp('IBDB')
runApp('IBDB')
runApp('IBDB')
renv::snapshot()
renv::snapshot()
runApp('IBDB')
setwd("E:/CODING/R-WD1/IBDB")
library(enrichR)
install.packages("rlang")
library(rlang)
library(enrichR)
install.packages("rlang", version="2.0")
rm(list=ls())
shiny::runApp()
runApp()
runApp()
library(shinipsum)
install.packages("shinipsum")
renv::status
renv::status()
runApp()
runApp()
renv::status()
renv::deactivate()
renv::status()
renv::install("ComplexHeatmap")
renv::install("bioc::ComplexHeatmap")
getOption("renv.bioconductor.version")
renv::settings$bioconductor.version("3.16")
renv::install("bioc::ComplexHeatmap")
renv::status()
renv::snapshot()
shiny::runApp()
library(shinipsum)
renv::status()
renv::status()
renv::install("shinipsum")
# Rhino / shinyApp entrypoint. Do not edit.
rhino::app()
getwd()
runApp()
runApp()
