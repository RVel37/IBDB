txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
library(clusterProfiler)
BiocManager::install("ChIPseeker")
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <- ChIPseeker::readPeakFile("ENCFF496UPU.bigBed")
NDC <- ChIPseeker::readPeakFile("ENCFF581WPG.bigBed")
library(vctrs)
detach("package:vctrs", unload = TRUE)
remove.packages("vctrs")
install.packages("vctrs", version = "0.5.2")
install.packages("vctrs", version = "0.5.2")
library("vctrs")
install.packages("vctrs", version = "0.5.2")
install.packages("vctrs", version = "0.5.2")
install.packages("vctrs", version = "0.5.2")
library(vctrs)
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <- ChIPseeker::readPeakFile("ENCFF496UPU.bigBed")
remove.packages("rlang")
install.packages("rlang", version = "1.1.0")
install.packages("rlang", version = "1.1.0")
library(rlang)
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <- ChIPseeker::readPeakFile("ENCFF496UPU.bigBed")
library(TxDb.Hsapiens.UCSC.hg38.knownGene)
library(ChIPseeker)
library(ChIPseeker)
BiocManager::install("ChIPpeakAnno")
library(ChIPseeker)
library(ChIPseeker)
library(ChIPseeker)
BiocManager::install("TxDb.Hsapiens.UCSC.hg38.knownGene")
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <- ChIPseeker::readPeakFile("ENCFF496UPU.bigBed")
NDC <- ChIPseeker::readPeakFile("ENCFF581WPG.bigBed")
BiocManager::install("TxDb.Hsapiens.UCSC.hg38.knownGene")
force = TRUE
BiocManager::install("TxDb.Hsapiens.UCSC.hg38.knownGene", force = TRUE)
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <- ChIPseeker::readPeakFile("ENCFF496UPU.bigBed")
library(ChIPseeker)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene
library(clusterProfiler)
BiocManager::install("ChIPseeker")
library(ChIPseeker)
BiocManager::install("TxDb.Hsapiens.UCSC.hg19.knownGene")
library(ChIPseeker)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
library(clusterProfiler)
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <- ChIPseeker::readPeakFile("ENCFF496UPU.bigBed")
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <- ChIPseeker::readPeakFile("ENCFF496UPU.bigBed")
NDC <- ChIPseeker::readPeakFile("ENCFF581WPG.bigBed")
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <- ChIPseeker::readPeakFile("ENCFF496UPU.bigBed",
as = "GRanges")
NDC <- ChIPseeker::readPeakFile("ENCFF581WPG.bigBed",
as = "GRanges")
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <- ChIPseeker::readPeakFile("ENCFF496UPU.Bed",
as = "GRanges")
source("https://bioconductor.org/biocLite.R")
library(rtracklayer)
BiocManager::install("rtracklayer")
library(rtracklayer)
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <- import("ENCFF496UPU.bigBed",format="bed")
NDC <- ChIPseeker::readPeakFile("ENCFF308JDD.bed.gz",
as = "GRanges")
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <-ChIPseeker::readPeakFile("ENCFF501VUI.bed.gz",as="GRanges")
NDC <-ChIPseeker::readPeakFile("ENCFF308JDD.bed.gz",as="GRanges")
View(NDC)
print(NPC)
files <- getSampleFiles("ENCFF501VUI.bed.gz","ENCFF308JDD.bed.gz")
files <- getSampleFiles()
print(files)
readPeakFile(files[[4]])
files <- list(NPC,DPC)
files <- list(NPC,NDC)
print(files)
covplot(NPC, weightCol="V5")
covplot(files,weightCol = "V1")
covplot(NPC,weightCol = "V1")
covplot(NPC,weightCol = "V1")
covplot(NPC, weightCol = "V5")
annotatePeak(NPC, tssRegion=c(-3000,3000),
TxDB=txdb, annoDB="org.Hs.eg.db")
?annotatePeak
annotatePeak(NPC, tssRegion=c(-3000,3000),
TxDB=txdb, annoDB="org.Hs.eg.db")
annotatePeak(NPC, tssRegion=c(-3000,3000)
,
TxDB=txdb, annoDB="org.Hs.eg.db")
annotatePeak(NPC, tssRegion=c(-3000,3000))
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
txdb <- "TxDb.Hsapiens.UCSC.hg19.knownGene"
annotatePeak(NPC, tssRegion=c(-3000,3000),TxDb=txdb)
annotatePeak(NPC, tssRegion=c(-3000,3000))
peakAnno <- annotatePeak(NPC, tssRegion=c(-3000,3000),
TxDb = "TxDb.Hsapiens.UCSC.hg19.knownGene")
peakAnno <- annotatePeak(NPC, tssRegion=c(-3000,3000),
TxDb =TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
peakAnno <- annotatePeak(NPC, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
vennpie(peakAnno)
upsetplot(peakAnno)
install.packages("UpSetR")
library(UpSetR)
upsetplot(peakAnno)
UpSetR::upsetplot(peakAnno)
??upsetplot
ChIPseeker::upsetplot(peakAnno)
ChIPseeker::upsetplot(peakAnno)
install.packages("ggupset")
library(ggupset)
ChIPseeker::upsetplot(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
inst
install.packages("ggimage")
library(ggimage)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
#annotatePeak uses hg19 by default
annotatePeak <- function(x){
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(x)
plotAnnoBar(x)
ChIPseeker::upsetplot(x, vennpie=T)
}
PeakAnno <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnno(NPC)
PeakAnno(NDC)
PeakAnno <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnno(NPC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnno(NPC)
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
PeakAnno(NPC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnnofun <- function(x){
print(x)
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnno(NPC)
PeakAnnofun <- function(x){
print(x)
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x)
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnno(NPC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnnofun(NPC)
PeakAnnofun(NDC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x)
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnnofun(NPC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x)
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnnofun(NPC)
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x)
PeakAnnofun(NPC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
x <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnnofun(NPC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
a <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnnofun(NPC)
View(annotatePeak)
#annotatePeak uses hg19 by default
paNPC <- annotatePeak(NPC, tssRegion=c(-3000,3000))
paNDC <- annotatePeak(NDC, tssregion=c(-3000,3000))
#annotatePeak uses hg19 by default
paNPC <- annotatePeak(NPC, tssRegion=c(-3000,3000))
#annotatePeak uses hg19 by default
paNPC <- annotatePeak(NPC, tssRegion=c(-3000,3000))
paNDC <- annotatePeak(NDC, tssRegion=c(-3000,3000))
#annotatePeak uses hg19 by default
paNPC <- annotatePeak(NPC, tssregion=c(-3000,3000))
paNDC <- annotatePeak(NDC, tssregion=c(-3000,3000))
?annotatePeak
#annotatePeak uses hg19 by default
paNPC <- annotatePeak(NPC, tssRegion = c(-3000,3000))
paNDC <- annotatePeak(NDC, tssRegion = c(-3000,3000))
BiocManager::install("ChIPseeker")
library(ChIPseeker)
library(clusterProfiler)
library(ggupset)
library(ggimage)
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <-ChIPseeker::readPeakFile("ENCFF501VUI.bed.gz",as="GRanges")
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <- ChIPseeker::readPeakFile("ENCFF501VUI.bed.gz",as="GRanges")
getwd()
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <-ChIPseeker::readPeakFile("ENCFF501VUI.bed.gz",as="GRanges")
NDC <-ChIPseeker::readPeakFile("ENCFF308JDD.bed.gz",as="GRanges")
files <- list(NPC,NDC)
#annotatePeak uses hg19 by default
paNPC <- annotatePeak(NPC, tssRegion = c(-3000,3000))
#annotatePeak uses hg19 by default
paNPC <- ChIPseeker::annotatePeak(NPC, tssRegion = c(-3000,3000))
paNDC <- ChIPseeker::annotatePeak(NDC, tssRegion = c(-3000,3000))
#annotatePeak uses hg19 by default
plotAnno <- function(x){
pa <- ChIPseeker::annotatePeak(NPC, tssRegion = c(-3000,3000))
plotAnnoPie(pa)
plotAnnoBar(pa)
ChIPseeker::upsetplot(pa, vennpie=T)
}
plotAnno(NPC)
plotAnno(NDC)
install.packages("ReactomePA")
BiocManager::install("ReactomePA")
library(ReactomePA)
pathway1 <- enrichPathway(as.data.frame(paNPC)$geneID)
pathway1 <- enrichPathway(as.data.frame(paNPC)$geneID)
paNPC <- ChIPseeker::annotatePeak(NPC, tssRegion = c(-3000,3000))
paNDC <- ChIPseeker::annotatePeak(NDC, tssRegion = c(-3000,3000))
pathway1 <- enrichPathway(as.data.frame(paNPC)$geneID)
head(pathway1)
head(pathway1,2)
pathway1 <- enrichPathway(as.data.frame(paNPC)$geneId)
head(pathway1,2)
gene <- seq2gene(NPC, tssRegion = c(-1000, 1000), flankDistance = 3000)
gene <- seq2gene(NPC, tssRegion = c(-1000, 1000), flankDistance = 3000,
TxDb=TxDb.Hsapiens.UCSC.hg19.knownGene)
gene <- ChIPseq::seq2gene(NPC, tssRegion = c(-1000, 1000), flankDistance = 3000,
TxDb=TxDb.Hsapiens.UCSC.hg19.knownGene)
gene <- ChIPseeker::seq2gene(NPC, tssRegion = c(-1000, 1000), flankDistance = 3000,
TxDb=TxDb.Hsapiens.UCSC.hg19.knownGene)
gene <- ChIPseeker::seq2gene(NPC, tssRegion = c(-1000, 1000), flankDistance = 3000,
TxDb=TxDb.Hsapiens.UCSC.hg19.knownGene)
TxDb.Hsapiens.UCSC.hg19.knownGene::TxDb.Hsapiens.UCSC.hg19.knownGene
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene::TxDb.Hsapiens.UCSC.hg19.knownGene
gene <- ChIPseeker::seq2gene(NPC, tssRegion = c(-1000, 1000), flankDistance = 3000,
TxDb=txdb)
pathway2 <- enrichPathway(gene)
head(pathway2, 2)
dotplot(pathway2)
data("tagMatrixList")
plotAvgProf(tagMatrixList,xlim = c(-3000,3000))
#ChIP peak dataset comparisons between NPC + NDC
promoter <- getPromoters(TxDb=txdb, upstream=3000, downstream=3000)
tagMatrixList <- lapply(files, getTagMatrix, windows=promoter)
data("tagMatrixList")
plotAvgProf(tagMatrixList,xlim = c(-3000,3000))
plotAvgProf(tagMatrixList, xlim=c(-3000, 3000), conf=0.95,resample=500, facet="row")
?getBioRegion
#ChIP peak dataset comparisons between NPC + NDC
bioregion <- ChIPseeker::getBioRegion(TxDb=txdb, upstream=3000, downstream=3000)
tagMatrixList <- lapply(files, getTagMatrix, windows=bioregion)
#ChIP peak dataset comparisons between NPC + NDC
bioregion <- ChIPseeker::getBioRegion(TxDb=txdb, by = "gene", type = "body")
#ChIP peak dataset comparisons between NPC + NDC
promoter <- getPromoters(TxDb=txdb, upstream=3000, downstream=3000)
tagMatrixList <- lapply(files, getTagMatrix, windows=promoter)
library("GenomicFeatures")
BiocManager::install("Genomic Features")
?makeTxDbFromEnsembl
txdb <- GenomicFeatures::makeTxDbFromEnsembl(
organism="Homo sapiens",
release=107
)
BiocManager::install("RMariaDB")
txdb <- GenomicFeatures::makeTxDbFromEnsembl(
organism="Homo sapiens",
release=107
)
gene_lengths <- GenomicFeatures::transcriptsBy(txdb, "gene") %>%
GenomicRanges::reduce() %>%
GenomicRanges::width() %>%
sum()
library(edgeR)
library(tidyverse)
library(DBI)
library(RSQLite)
#get gene lengths
txdb <- GenomicFeatures::makeTxDbFromEnsembl(
organism="Homo sapiens",
release=107
)
gene_lengths <- GenomicFeatures::transcriptsBy(txdb, "gene") %>%
GenomicRanges::reduce() %>%
GenomicRanges::width() %>%
sum()
metadata <- read.csv("metadata/metadata.csv")
setwd("E:/CODING/R-WD1/IBD-Application/IBD-DB/preprocess")
metadata <- read.csv("metadata/metadata.csv")
contrasts <- read.csv("contrasts.csv")
exp_outfile_suffix <- "_gene_exp.csv.gz"
deg_outfile_suffix <- "_degs.csv.gz"
mat_longify <- function(x) {
as.data.frame(x) %>%
rownames_to_column("gene_id") %>%
pivot_longer(cols = contains("SRR"))
}
rpkm_to_tpm <- function(x){
rpkm.sum <- colSums(x)
return(t(t(x) / (1e-06 * rpkm.sum)))
}
all_contrasts <- read.csv("contrasts.csv")
unique_studies <- metadata %>% distinct(study_id) %>% pull()
View(files)
unique_studies <- metadata %>% distinct(study_id) %>% pull()
for (study_id in unique_studies) {
exp_filename <- paste0(study_id, "_gene_exp.csv.gz")
deg_filename <- paste0(study_id, "_degs.csv.gz")
samples <- metadata %>% filter(study_id == !!study_id) %>% pull(sample_id)
mat <- lapply(samples, function(id) {
strand <- metadata %>% filter(sample_id == id) %>% pull(stranded)
count_path <- file.path("raw_counts", paste0(id, "_ReadsPerGene.out.tab"))
read_tsv(count_path,
skip = 4,
col_names = c("gene_id", "unstranded", "forward", "reverse")
) %>%
select(gene_id, contains(!!strand)) %>%
rename(counts = contains(!!strand)) %>%
mutate(sample_id = id)
}) %>%
bind_rows() %>%
pivot_wider(names_from = sample_id, values_from = counts) %>%
column_to_rownames("gene_id") %>%
as.matrix()
cpms <- mat %>%
DGEList() %>%
calcNormFactors() %>%
cpm() %>%
mat_longify() %>%
rename(sample_id = name, cpm = value)
rpkms_mat <- rpkm(mat, gene_lengths[rownames(mat)])
rpkms <- rpkms_mat %>%
mat_longify() %>%
rename(sample_id = name, rpkm = value)
tpms <- rpkm_to_tpm(rpkms_mat) %>%
mat_longify() %>%
rename(sample_id = name, tpm = value)
cpms %>%
inner_join(rpkms, by = c("gene_id", "sample_id")) %>%
inner_join(tpms, by = c("gene_id", "sample_id")) %>%
write_csv(paste0(study_id, "_gene_exp.csv.gz"))
rm(cpms, rpkms, rpkms_mat, tpms)
gc()
}
unique_studies <- metadata %>% distinct(study_id) %>% pull()
for (study_id in unique_studies) {
exp_filename <- paste0(study_id, "_gene_exp.csv.gz")
deg_filename <- paste0(study_id, "_degs.csv.gz")
samples <- metadata %>% filter(study_id == !!study_id) %>% pull(sample_id)
mat <- lapply(samples, function(id) {
strand <- metadata %>% filter(sample_id == id) %>% pull(stranded)
count_path <- file.path("raw_counts", paste0(id, "_ReadsPerGene.out.tab"))
read_tsv(count_path,
skip = 4,
col_names = c("gene_id", "unstranded", "forward", "reverse")
) %>%
select(gene_id, contains(!!strand)) %>%
rename(counts = contains(!!strand)) %>%
mutate(sample_id = id)
}) %>%
bind_rows() %>%
pivot_wider(names_from = sample_id, values_from = counts) %>%
column_to_rownames("gene_id") %>%
as.matrix()
cpms <- mat %>%
DGEList() %>%
calcNormFactors() %>%
cpm() %>%
mat_longify() %>%
rename(sample_id = name, cpm = value)
rpkms_mat <- rpkm(mat, gene_lengths[rownames(mat)])
rpkms <- rpkms_mat %>%
mat_longify() %>%
rename(sample_id = name, rpkm = value)
tpms <- rpkm_to_tpm(rpkms_mat) %>%
mat_longify() %>%
rename(sample_id = name, tpm = value)
cpms %>%
inner_join(rpkms, by = c("gene_id", "sample_id")) %>%
inner_join(tpms, by = c("gene_id", "sample_id")) %>%
write_csv(paste0(study_id, "_gene_exp.csv.gz"))
rm(cpms, rpkms, rpkms_mat, tpms)
gc()
}
#import data
metadata <- read.csv("metadata/metadata.csv")
unique_studies <- metadata %>% distinct(study_id) %>% pull()
for (study_id in unique_studies) {
exp_filename <- paste0(study_id, "_gene_exp.csv.gz")
deg_filename <- paste0(study_id, "_degs.csv.gz")
samples <- metadata %>% filter(study_id == !!study_id) %>% pull(sample_id)
mat <- lapply(samples, function(id) {
strand <- metadata %>% filter(sample_id == id) %>% pull(strandedness)
count_path <- file.path("raw_counts", paste0(id, "_ReadsPerGene.out.tab"))
read_tsv(count_path,
skip = 4,
col_names = c("gene_id", "unstranded", "reverse")
) %>%
select(gene_id, contains(!!strand)) %>%
rename(counts = contains(!!strand)) %>%
mutate(sample_id = id)
}) %>%
bind_rows() %>%
pivot_wider(names_from = sample_id, values_from = counts) %>%
column_to_rownames("gene_id") %>%
as.matrix()
cpms <- mat %>%
DGEList() %>%
calcNormFactors() %>%
cpm() %>%
mat_longify() %>%
rename(sample_id = name, cpm = value)
rpkms_mat <- rpkm(mat, gene_lengths[rownames(mat)])
rpkms <- rpkms_mat %>%
mat_longify() %>%
rename(sample_id = name, rpkm = value)
tpms <- rpkm_to_tpm(rpkms_mat) %>%
mat_longify() %>%
rename(sample_id = name, tpm = value)
cpms %>%
inner_join(rpkms, by = c("gene_id", "sample_id")) %>%
inner_join(tpms, by = c("gene_id", "sample_id")) %>%
write_csv(paste0(study_id, "_gene_exp.csv.gz"))
rm(cpms, rpkms, rpkms_mat, tpms)
gc()
}
