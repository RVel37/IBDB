?annotatePeak
annotatePeak(NPC, tssRegion=c(-3000,3000),
TxDB=txdb, annoDB="org.Hs.eg.db")
annotatePeak(NPC, tssRegion=c(-3000,3000)
,
TxDB=txdb, annoDB="org.Hs.eg.db")
annotatePeak(NPC, tssRegion=c(-3000,3000))
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
txdb <- "TxDb.Hsapiens.UCSC.hg19.knownGene"
annotatePeak(NPC, tssRegion=c(-3000,3000),TxDb=txdb)
annotatePeak(NPC, tssRegion=c(-3000,3000))
peakAnno <- annotatePeak(NPC, tssRegion=c(-3000,3000),
TxDb = "TxDb.Hsapiens.UCSC.hg19.knownGene")
peakAnno <- annotatePeak(NPC, tssRegion=c(-3000,3000),
TxDb =TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
peakAnno <- annotatePeak(NPC, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
vennpie(peakAnno)
upsetplot(peakAnno)
install.packages("UpSetR")
library(UpSetR)
upsetplot(peakAnno)
UpSetR::upsetplot(peakAnno)
??upsetplot
ChIPseeker::upsetplot(peakAnno)
ChIPseeker::upsetplot(peakAnno)
install.packages("ggupset")
library(ggupset)
ChIPseeker::upsetplot(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
inst
install.packages("ggimage")
library(ggimage)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
#annotatePeak uses hg19 by default
annotatePeak <- function(x){
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(x)
plotAnnoBar(x)
ChIPseeker::upsetplot(x, vennpie=T)
}
PeakAnno <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnno(NPC)
PeakAnno(NDC)
PeakAnno <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnno(NPC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnno(NPC)
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
PeakAnno(NPC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnnofun <- function(x){
print(x)
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnno(NPC)
PeakAnnofun <- function(x){
print(x)
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x)
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnno(NPC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnnofun(NPC)
PeakAnnofun(NDC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x)
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnnofun(NPC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x)
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnnofun(NPC)
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x)
PeakAnnofun(NPC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
#annotatePeak uses hg19 by default
peakAnno <- annotatePeak(x, tssRegion=c(-3000,3000))
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
x <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnnofun(NPC)
PeakAnnofun <- function(x){
#annotatePeak uses hg19 by default
a <- annotatePeak(x, tssRegion=c(-3000,3000))
plotAnnoPie(peakAnno)
plotAnnoBar(peakAnno)
ChIPseeker::upsetplot(peakAnno, vennpie=T)
}
PeakAnnofun(NPC)
View(annotatePeak)
#annotatePeak uses hg19 by default
paNPC <- annotatePeak(NPC, tssRegion=c(-3000,3000))
paNDC <- annotatePeak(NDC, tssregion=c(-3000,3000))
#annotatePeak uses hg19 by default
paNPC <- annotatePeak(NPC, tssRegion=c(-3000,3000))
#annotatePeak uses hg19 by default
paNPC <- annotatePeak(NPC, tssRegion=c(-3000,3000))
paNDC <- annotatePeak(NDC, tssRegion=c(-3000,3000))
#annotatePeak uses hg19 by default
paNPC <- annotatePeak(NPC, tssregion=c(-3000,3000))
paNDC <- annotatePeak(NDC, tssregion=c(-3000,3000))
?annotatePeak
#annotatePeak uses hg19 by default
paNPC <- annotatePeak(NPC, tssRegion = c(-3000,3000))
paNDC <- annotatePeak(NDC, tssRegion = c(-3000,3000))
BiocManager::install("ChIPseeker")
library(ChIPseeker)
library(clusterProfiler)
library(ggupset)
library(ggimage)
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <-ChIPseeker::readPeakFile("ENCFF501VUI.bed.gz",as="GRanges")
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <- ChIPseeker::readPeakFile("ENCFF501VUI.bed.gz",as="GRanges")
getwd()
#load studies
# (Neural progenitor cells vs differentiated cells)
NPC <-ChIPseeker::readPeakFile("ENCFF501VUI.bed.gz",as="GRanges")
NDC <-ChIPseeker::readPeakFile("ENCFF308JDD.bed.gz",as="GRanges")
files <- list(NPC,NDC)
#annotatePeak uses hg19 by default
paNPC <- annotatePeak(NPC, tssRegion = c(-3000,3000))
#annotatePeak uses hg19 by default
paNPC <- ChIPseeker::annotatePeak(NPC, tssRegion = c(-3000,3000))
paNDC <- ChIPseeker::annotatePeak(NDC, tssRegion = c(-3000,3000))
#annotatePeak uses hg19 by default
plotAnno <- function(x){
pa <- ChIPseeker::annotatePeak(NPC, tssRegion = c(-3000,3000))
plotAnnoPie(pa)
plotAnnoBar(pa)
ChIPseeker::upsetplot(pa, vennpie=T)
}
plotAnno(NPC)
plotAnno(NDC)
install.packages("ReactomePA")
BiocManager::install("ReactomePA")
library(ReactomePA)
pathway1 <- enrichPathway(as.data.frame(paNPC)$geneID)
pathway1 <- enrichPathway(as.data.frame(paNPC)$geneID)
paNPC <- ChIPseeker::annotatePeak(NPC, tssRegion = c(-3000,3000))
paNDC <- ChIPseeker::annotatePeak(NDC, tssRegion = c(-3000,3000))
pathway1 <- enrichPathway(as.data.frame(paNPC)$geneID)
head(pathway1)
head(pathway1,2)
pathway1 <- enrichPathway(as.data.frame(paNPC)$geneId)
head(pathway1,2)
gene <- seq2gene(NPC, tssRegion = c(-1000, 1000), flankDistance = 3000)
gene <- seq2gene(NPC, tssRegion = c(-1000, 1000), flankDistance = 3000,
TxDb=TxDb.Hsapiens.UCSC.hg19.knownGene)
gene <- ChIPseq::seq2gene(NPC, tssRegion = c(-1000, 1000), flankDistance = 3000,
TxDb=TxDb.Hsapiens.UCSC.hg19.knownGene)
gene <- ChIPseeker::seq2gene(NPC, tssRegion = c(-1000, 1000), flankDistance = 3000,
TxDb=TxDb.Hsapiens.UCSC.hg19.knownGene)
gene <- ChIPseeker::seq2gene(NPC, tssRegion = c(-1000, 1000), flankDistance = 3000,
TxDb=TxDb.Hsapiens.UCSC.hg19.knownGene)
TxDb.Hsapiens.UCSC.hg19.knownGene::TxDb.Hsapiens.UCSC.hg19.knownGene
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene::TxDb.Hsapiens.UCSC.hg19.knownGene
gene <- ChIPseeker::seq2gene(NPC, tssRegion = c(-1000, 1000), flankDistance = 3000,
TxDb=txdb)
pathway2 <- enrichPathway(gene)
head(pathway2, 2)
dotplot(pathway2)
data("tagMatrixList")
plotAvgProf(tagMatrixList,xlim = c(-3000,3000))
#ChIP peak dataset comparisons between NPC + NDC
promoter <- getPromoters(TxDb=txdb, upstream=3000, downstream=3000)
tagMatrixList <- lapply(files, getTagMatrix, windows=promoter)
data("tagMatrixList")
plotAvgProf(tagMatrixList,xlim = c(-3000,3000))
plotAvgProf(tagMatrixList, xlim=c(-3000, 3000), conf=0.95,resample=500, facet="row")
?getBioRegion
#ChIP peak dataset comparisons between NPC + NDC
bioregion <- ChIPseeker::getBioRegion(TxDb=txdb, upstream=3000, downstream=3000)
tagMatrixList <- lapply(files, getTagMatrix, windows=bioregion)
#ChIP peak dataset comparisons between NPC + NDC
bioregion <- ChIPseeker::getBioRegion(TxDb=txdb, by = "gene", type = "body")
#ChIP peak dataset comparisons between NPC + NDC
promoter <- getPromoters(TxDb=txdb, upstream=3000, downstream=3000)
tagMatrixList <- lapply(files, getTagMatrix, windows=promoter)
#set up connection to in-memory RSQLite database
conn <- dbConnect(RSQLite::SQLite(), "E:\CODING\R-WD1\IBD-Application\IBD-DB")
#set up connection to in-memory RSQLite database
conn <- dbConnect(RSQLite::SQLite(), "R-WD1\IBD-Application\IBD-DB")
#set up connection to in-memory RSQLite database
conn <- dbConnect(RSQLite::SQLite(), "IBD-Application\IBD-DB")
#set up connection to in-memory RSQLite database
conn <- dbConnect(RSQLite::SQLite(), "IBD-Application/IBD-DB")
#copy data into RSQLite databas
dbWriteTable(con, "App_data", app_data)
#set up connection to in-memory RSQLite database
conn <- dbConnect(RSQLite::SQLite(), "IBD-Application/IBD-DB")
library(RSQLite)
library(edgeR)
library(tidyverse)
library(DBI)
#set up connection to in-memory RSQLite database
conn <- dbConnect(RSQLite::SQLite(), "IBD-Application/IBD-DB")
#set up connection to in-memory RSQLite database
conn <- dbConnect(RSQLite::SQLite(), "IBDB.sqlite")
#store permanently on disk
conn <- dbConnect(RSQLite::SQLite(), "appdata.sqlite")
#write data to table
RSQLite::dbWriteTable(conn, "Appdata", appdata)
shiny::runApp('IBD-Application/IBD-DB')
runApp('IBD-Application/IBD-DB')
runApp('IBD-Application/IBD-DB')
getwd()
setwd("E:/CODING/R-WD1/IBD-Application/test2")
rhino::init("IBDB-app")
shiny::runApp('IBDB-app')
View(promoter)
file <- paste0("./scripts/raw_data/app_data.rds",)
file <- paste0("./scripts/raw_data/app_data.rds")
head(file)
file <- readRDS("./scripts/raw_data/app_data.rds")
file <- readRDS(./scripts/raw_data/app_data.rds)
setwd("E:/CODING/R-WD1/IBD-Application/test2/IBDB-app")
file <- readRDS("./scripts/raw_data/app_data.rds")
head(file)
raw <- readRDS("./scripts/raw_data/app_data.rds")
GEO_BASE <- "https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc="
head(GEO_BASE)
GEO_BASE <- read.delim("https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=")
geodata <- read.delim(GEO_BASE)
HEAD(geodata)
head(geodata)
geobase <- read.delim(GEO_BASE)
?saveRDS
saveRDS(GEO_BASE,"geobase.RDS")
GEO_BASE <- "https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc="
saveRDS(GEO_BASE,"geobase.RDS")
GENECARDS_BASE <- "https://www.genecards.org/cgi-bin/carddisp.pl?gene="
saveRDS(GENECARDS_BASE,"genecardsbase.RDS")
S3_HTTPS <- "https://liverdb-data.s3.amazonaws.com/"
saveRDS(S3_HTTPS,"s3https.RDS")
exps <- app_data[["exps"]]
exps <- raw[["exps"]]
saveRDS(exps, "exps.rds")
exps126 <- exps[["GSE126848"]]
saveRDS(exps126, "exps126.rds")
exps135 <- exps[["GSE135251"]]
saveRDS(exps126, "exps126.rds")
degs <- raw[["degs"]]
saveRDS(degs, "degs.rds")
degs126 <- degs[["GSE126848"]]
saveRDS(degs126, "degs126.rds")
degs135 <- degs[["GSE135251"]]
saveRDS(degs135, "degs135.rds")
metadata <- raw[["metadata"]]
saveRDS(degs135, "degs135.rds")
deg_contrasts <- raw[["contrasts"]]
saveRDS(deg_contrasts, "deg_contrasts.rds")
eres <- raw[["eres"]]
saveRDS(eres, "eres.rds")
save_path <- "./app/data"
saveRDS(deg_contrasts, "deg_contrasts.rds", path = save_path)
deg_contrasts <- raw[["contrasts"]]
saveRDS(deg_contrasts,
path = paste0(save_path,"deg_contrasts.rds"))
View(deg_contrasts)
rds_files <- list.files(pattern = "*.rds")
for (file in rds_files) {
file.rename(to = file.path("IBDB-app/app/data", file))
}
rds_files <- list.files(pattern = "*.rds")
for (file in rds_files) {
file.rename(from = file.path("IBDB-app/scripts/data.R"),
to = file.path("IBDB-app/app/data", file))
}
exists("IBDB-app/scripts")
exists("IBDB-app/scripts/data")
exists("IBDB-app/scripts/data.R")
getwd()
for (file in rds_files) {
file.rename(from = file.path("scripts/data.R"),
to = file.path("app/data", file))
}
exists("scripts/data.R")
exists("scripts/data.R")
exists("IBDB-app/scripts/data.R")
rstudioapi::getSourceEditorContext()$path
getwd()
exists("scripts/data.R")
file.exists("scripts/data.R")
for (file in rds_files) {
file.rename(from = file.path("scripts", paste0(file, ".rds")),
to = file.path("app/data", paste0(file, ".rds")))
}
for (file in rds_files) {
file.rename(from = file.path("scripts", paste0(file, ".rds")),
to = file.path("app/data", paste0(file, ".rds")))
}
for (file in rds_files) {
file.rename(from = file.path("scripts/data.R"),
to = file.path("app/data", file))
}
#raw data
raw <- readRDS("./scripts/raw_data/app_data.rds")
#----------------
#links
GEO_BASE <- "https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc="
saveRDS(GEO_BASE,"geobase.RDS")
GENECARDS_BASE <- "https://www.genecards.org/cgi-bin/carddisp.pl?gene="
saveRDS(GENECARDS_BASE,"genecardsbase.RDS")
S3_HTTPS <- "https://liverdb-data.s3.amazonaws.com/"
saveRDS(S3_HTTPS,"s3https.RDS")
#-----------------
exps <- raw[["exps"]]
saveRDS(exps, "exps.rds")
exps126 <- exps[["GSE126848"]]
saveRDS(exps126, "exps126.rds")
exps135 <- exps[["GSE135251"]]
saveRDS(exps126, "exps126.rds")
degs <- raw[["degs"]]
saveRDS(degs, "degs.rds")
degs126 <- degs[["GSE126848"]]
saveRDS(degs126, "degs126.rds")
degs135 <- degs[["GSE135251"]]
saveRDS(degs135, "degs135.rds")
metadata <- raw[["metadata"]]
saveRDS(degs135, "degs135.rds")
deg_contrasts <- raw[["contrasts"]]
saveRDS(deg_contrasts, "deg_contrasts.rds")
eres <- raw[["eres"]]
saveRDS(eres, "eres.rds")
rds_files <- list.files(pattern = "*.rds")
head(rds_files)
for (file in rds_files) {
file.rename(file, file.path("app/data", basename(file)))
}
GEO_BASE <- "https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc="
GEO_BASE <- "https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc="
raw <- readRDS("./scripts/raw_data/app_data.rds")
#----------------
#links
GEO_BASE <- "https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc="
saveRDS(GEO_BASE,"geobase.rds")
GENECARDS_BASE <- "https://www.genecards.org/cgi-bin/carddisp.pl?gene="
saveRDS(GENECARDS_BASE,"genecardsbase.RDS")
S3_HTTPS <- "https://liverdb-data.s3.amazonaws.com/"
saveRDS(S3_HTTPS,"s3https.RDS")
#-----------------
exps <- raw[["exps"]]
saveRDS(exps, "exps.rds")
exps126 <- exps[["GSE126848"]]
saveRDS(exps126, "exps126.rds")
exps135 <- exps[["GSE135251"]]
saveRDS(exps126, "exps126.rds")
degs <- raw[["degs"]]
saveRDS(degs, "degs.rds")
degs126 <- degs[["GSE126848"]]
saveRDS(degs126, "degs126.rds")
degs135 <- degs[["GSE135251"]]
saveRDS(degs135, "degs135.rds")
metadata <- raw[["metadata"]]
saveRDS(degs135, "degs135.rds")
deg_contrasts <- raw[["contrasts"]]
saveRDS(deg_contrasts, "deg_contrasts.rds")
eres <- raw[["eres"]]
saveRDS(eres, "eres.rds")
#----------------
#move RDS files into target folder (app/data)
rds_files <- list.files(pattern = "*.rds")
for (file in rds_files) {
file.rename(file, file.path("app/data", basename(file)))
}
GEO_BASE <- "https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc="
saveRDS(GEO_BASE,"geobase.rds")
GENECARDS_BASE <- "https://www.genecards.org/cgi-bin/carddisp.pl?gene="
saveRDS(GENECARDS_BASE,"genecardsbase.RDS")
S3_HTTPS <- "https://liverdb-data.s3.amazonaws.com/"
saveRDS(S3_HTTPS,"s3https.RDS")
exps <- raw[["exps"]]
saveRDS(exps, "exps.rds")
exps126 <- exps[["GSE126848"]]
saveRDS(exps126, "exps126.rds")
exps135 <- exps[["GSE135251"]]
saveRDS(exps126, "exps126.rds")
degs <- raw[["degs"]]
saveRDS(degs, "degs.rds")
degs126 <- degs[["GSE126848"]]
saveRDS(degs126, "degs126.rds")
degs135 <- degs[["GSE135251"]]
saveRDS(degs135, "degs135.rds")
metadata <- raw[["metadata"]]
saveRDS(degs135, "degs135.rds")
deg_contrasts <- raw[["contrasts"]]
saveRDS(deg_contrasts, "deg_contrasts.rds")
eres <- raw[["eres"]]
saveRDS(eres, "eres.rds")
rds_files <- list.files(pattern = "*.rds")
for (file in rds_files) {
file.rename(file, file.path("app/data", basename(file)))
}
GENECARDS_BASE <- "https://www.genecards.org/cgi-bin/carddisp.pl?gene="
saveRDS(GENECARDS_BASE,"genecardsbase.rds")
rds_files <- list.files(pattern = "*.rds")
for (file in rds_files) {
file.rename(file, file.path("app/data", basename(file)))
}
head(geobase.rds)
head(geobase)
head(S3_HTTPS)
head(s3https)
saveRDS(S3_HTTPS,"s3https.RDS")
head(s3https.rds)
GEO_BASE <- "https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc="
saveRDS(GEO_BASE,"geobase.rds")
head(geobase.rds)
head(geobase)
View(geodata)
View(geobase)
head(degs)
head(degs[135])
head(degs[2])
head(degs126)
head(degs135)
head(eres)
renv::snapshot()
runApp('app/view')
install.packages("shinycssloaders")
install.packages("bslib","shiny")
install.
install.packages(c("shiny","bslib","dplyr","prompter","tidyr","pheatmap","tibble","
futile.logger","ggplot2","tidyverse"))
install.packages(c("shiny","bslib","dplyr","prompter","tidyr","pheatmap","tibble","ggplot2","tidyverse"))
install.packages("futile.logger")
install.packages(c("lobstr","DT","plotly","ggplot2","UpSetR","tidyr","pheatmap","tibble"))
restartDescription()
restartDescription(r)
renv::snapshot()
shiny::runApp('app/view')
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
traceback()
runApp()
warning()
runApp()
install.packages("htmlwidgets")
install.packages("htmltools")
renv::snapshot()
runApp()
runApp()
runApp()
